/**
 * Generated by @thi.ng/wasm-api-bindgen at 2025-09-01T11:06:15.182Z
 * DO NOT EDIT!
 */

// @ts-ignore possibly includes unused imports
import { defType, Pointer, WasmStringPtr, type IWasmMemoryAccess, type MemorySlice, type MemoryView, type WasmTypeBase, type WasmTypeKeys } from "@thi.ng/wasm-api";
// @ts-ignore
import { __array, __instanceArray, __slice32, __primslice32 } from "@thi.ng/wasm-api/memory";

// @ts-ignore possibly unused
const __str = (mem: IWasmMemoryAccess, base: number, isConst = true) => new WasmStringPtr(mem, base, isConst);

export enum LineCap {
	butt,
	round,
	square,
}

export enum LineJoin {
	bevel,
	round,
	miter,
}

export enum TextAlign {
	start,
	end,
	left,
	right,
	center,
}

export enum TextBaseline {
	top,
	hanging,
	middle,
	alphabetic,
	ideographic,
	bottom,
}

export enum TextDirection {
	inherit,
	ltr,
	rtl,
}

export enum FontKerning {
	auto,
	normal,
	none,
}

export enum FillRule {
	nonzero,
	evenodd,
}

export enum PatternRepeat {
	repeat,
	repeat_x,
	repeat_y,
	no_repeat,
}

export enum GlobalCompositeOp {
	color,
	color_burn,
	color_dodge,
	copy,
	darken,
	destination_atop,
	destination_in,
	destination_out,
	destination_over,
	difference,
	exclusion,
	hard_light,
	hue,
	lighten,
	lighter,
	luminosity,
	multiply,
	overlay,
	saturation,
	screen,
	soft_light,
	source_atop,
	source_in,
	source_out,
	source_over,
	xor,
}

export interface GradientColorStop extends WasmTypeBase {
	/**
	 * Normalized position of this color stop
	 * 
	 * @remarks
	 * Zig type: `f32`
	 */
	pos: number;
	/**
	 * CSS color string associated with this stop
	 */
	readonly color: WasmStringPtr;
}

// @ts-ignore possibly unused args
export const $GradientColorStop = defType<GradientColorStop>(4, 8, (mem, base) => {
	let $color: WasmStringPtr;
	return {
		get pos(): number {
			return mem.f32[base >>> 2];
		},
		set pos(x: number) {
			mem.f32[base >>> 2] = x;
		},
		get color(): WasmStringPtr {
			return $color || ($color = __str(mem, (base + 4)));
		},
	};
});

/**
 * The dimensions of a piece of text in the canvas, as created by the
 * CanvasRenderingContext2D.measureText() method.
 */
export interface TextMetrics extends WasmTypeBase {
	/**
	 * Zig type: `f32`
	 */
	actualBoundingBoxAscent: number;
	/**
	 * Zig type: `f32`
	 */
	actualBoundingBoxDescent: number;
	/**
	 * Zig type: `f32`
	 */
	actualBoundingBoxLeft: number;
	/**
	 * Zig type: `f32`
	 */
	actualBoundingBoxRight: number;
	/**
	 * Zig type: `f32`
	 */
	fontBoundingBoxAscent: number;
	/**
	 * Zig type: `f32`
	 */
	fontBoundingBoxDescent: number;
	/**
	 * Zig type: `f32`
	 */
	width: number;
	
	/**
	 * Populate all fields from a canvas TextMetrics JS object
	 */
	fromMetrics(m: globalThis.TextMetrics): void;
	
}

// @ts-ignore possibly unused args
export const $TextMetrics = defType<TextMetrics>(4, 28, (mem, base) => {
	return {
		get actualBoundingBoxAscent(): number {
			return mem.f32[base >>> 2];
		},
		set actualBoundingBoxAscent(x: number) {
			mem.f32[base >>> 2] = x;
		},
		get actualBoundingBoxDescent(): number {
			return mem.f32[(base + 4) >>> 2];
		},
		set actualBoundingBoxDescent(x: number) {
			mem.f32[(base + 4) >>> 2] = x;
		},
		get actualBoundingBoxLeft(): number {
			return mem.f32[(base + 8) >>> 2];
		},
		set actualBoundingBoxLeft(x: number) {
			mem.f32[(base + 8) >>> 2] = x;
		},
		get actualBoundingBoxRight(): number {
			return mem.f32[(base + 12) >>> 2];
		},
		set actualBoundingBoxRight(x: number) {
			mem.f32[(base + 12) >>> 2] = x;
		},
		get fontBoundingBoxAscent(): number {
			return mem.f32[(base + 16) >>> 2];
		},
		set fontBoundingBoxAscent(x: number) {
			mem.f32[(base + 16) >>> 2] = x;
		},
		get fontBoundingBoxDescent(): number {
			return mem.f32[(base + 20) >>> 2];
		},
		set fontBoundingBoxDescent(x: number) {
			mem.f32[(base + 20) >>> 2] = x;
		},
		get width(): number {
			return mem.f32[(base + 24) >>> 2];
		},
		set width(x: number) {
			mem.f32[(base + 24) >>> 2] = x;
		},
		
		fromMetrics(m: globalThis.TextMetrics) {
			this.actualBoundingBoxAscent = m.actualBoundingBoxAscent;
			this.actualBoundingBoxDescent = m.actualBoundingBoxDescent;
			this.actualBoundingBoxLeft = m.actualBoundingBoxLeft;
			this.actualBoundingBoxRight = m.actualBoundingBoxRight;
			this.fontBoundingBoxAscent = m.fontBoundingBoxAscent;
			this.fontBoundingBoxDescent = m.fontBoundingBoxDescent;
			this.width = m.width;
		}
		
	};
});
