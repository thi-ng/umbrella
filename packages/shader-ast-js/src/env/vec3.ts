import {
    abs3,
    acos3,
    add3,
    addN3,
    asin3,
    atan_23,
    atan3,
    ceil3,
    clamp3,
    cos3,
    cross3,
    degrees3,
    dist,
    div3,
    divN3,
    dot3,
    exp_23,
    exp3,
    faceForward,
    floor3,
    fmod3,
    fmodN3,
    fract3,
    invSqrt3,
    log_23,
    log3,
    mag,
    max3,
    min3,
    mix3,
    mixN3,
    mul3,
    mulN3,
    neg,
    normalize,
    pow3,
    radians3,
    reflect,
    refract,
    sign3,
    sin3,
    smoothStep3,
    sqrt3,
    step3,
    sub3,
    subN3,
    tan3,
    ZERO3
} from "@thi.ng/vectors";
import { JSBuiltinsVec3 } from "../api";

export const VEC3: JSBuiltinsVec3 = {
    abs: (a) => abs3([], a),
    acos: (a) => acos3([], a),
    add: (a, b) => add3([], a, b),
    addnv: (a, b) => addN3([], b, a),
    addvn: (a, b) => addN3([], a, b),
    asin: (a) => asin3([], a),
    atan: (a) => atan3([], a),
    atannn: (a, b) => atan_23([], a, b),
    ceil: (a) => ceil3([], a),
    clamp: (x, a, b) => clamp3([], x, a, b),
    cos: (a) => cos3([], a),
    cross: (a, b) => cross3([], a, b),
    dec: (a) => subN3([], a, 1),
    degrees: (a) => degrees3([], a),
    dFdx: () => ZERO3,
    dFdy: () => ZERO3,
    distance: dist,
    div: (a, b) => div3([], a, b),
    divnv: (a, b) => div3(null, [a, a, a], b),
    divvn: (a, b) => divN3([], a, b),
    dot: (a, b) => dot3(a, b),
    exp: (a) => exp3([], a),
    exp2: (a) => exp_23([], a),
    faceForward: (a, b, c) => faceForward([], a, b, c),
    floor: (a) => floor3([], a),
    fract: (a) => fract3([], a),
    fwidth: () => ZERO3,
    inc: (a) => addN3([], a, 1),
    inversesqrt: (a) => invSqrt3([], a),
    length: mag,
    log: (a) => log3([], a),
    log2: (a) => log_23([], a),
    max: (a, b) => max3([], a, b),
    min: (a, b) => min3([], a, b),
    mix: (a, b, t) => mix3([], a, b, t),
    mixn: (a, b, t) => mixN3([], a, b, t),
    mod: (a, b) => fmod3([], a, b),
    modn: (a, b) => fmodN3([], a, b),
    mul: (a, b) => mul3([], a, b),
    mulnv: (a, b) => mulN3([], b, a),
    mulvn: (a, b) => mulN3([], a, b),
    normalize: (a) => normalize([], a),
    pow: (a, b) => pow3([], a, b),
    radians: (a) => radians3([], a),
    reflect: (a, b) => reflect([], a, b),
    refract: (a, b, c) => refract([], a, b, c),
    sign: (a) => sign3([], a),
    sin: (a) => sin3([], a),
    smoothstep: (a, b, t) => smoothStep3([], a, b, t),
    sqrt: (a) => sqrt3([], a),
    step: (a, b) => step3([], a, b),
    sub: (a, b) => sub3([], a, b),
    sub1: (a) => neg([], a),
    subnv: (a, b) => sub3(null, [a, a, a], b),
    subvn: (a, b) => subN3([], a, b),
    tan: (a) => tan3([], a)
};
