import {
    abs2,
    acos2,
    add2,
    addN2,
    asin2,
    atan_22,
    atan2,
    ceil2,
    clamp2,
    cos2,
    degrees2,
    dist,
    div2,
    divN2,
    dot2,
    exp_22,
    exp2,
    faceForward,
    floor2,
    fmod2,
    fmodN2,
    fract2,
    invSqrt2,
    log_22,
    log2,
    mag,
    max2,
    min2,
    mix2,
    mixN2,
    mul2,
    mulN2,
    neg,
    normalize,
    pow2,
    radians2,
    reflect,
    refract,
    sign2,
    sin2,
    smoothStep2,
    sqrt2,
    step2,
    sub2,
    subN2,
    tan2,
    ZERO2
} from "@thi.ng/vectors";
import { JSBuiltinsVec } from "../api";

export const VEC2: JSBuiltinsVec = {
    abs: (a) => abs2([], a),
    acos: (a) => acos2([], a),
    add: (a, b) => add2([], a, b),
    addnv: (a, b) => addN2([], b, a),
    addvn: (a, b) => addN2([], a, b),
    asin: (a) => asin2([], a),
    atan: (a) => atan2([], a),
    atannn: (a, b) => atan_22([], a, b),
    ceil: (a) => ceil2([], a),
    clamp: (x, a, b) => clamp2([], x, a, b),
    cos: (a) => cos2([], a),
    dec: (a) => subN2([], a, 1),
    degrees: (a) => degrees2([], a),
    dFdx: () => ZERO2,
    dFdy: () => ZERO2,
    distance: dist,
    div: (a, b) => div2([], a, b),
    divnv: (a, b) => div2(null, [a, a], b),
    divvn: (a, b) => divN2([], a, b),
    dot: (a, b) => dot2(a, b),
    exp: (a) => exp2([], a),
    exp2: (a) => exp_22([], a),
    faceForward: (a, b, c) => faceForward([], a, b, c),
    floor: (a) => floor2([], a),
    fract: (a) => fract2([], a),
    fwidth: () => ZERO2,
    inc: (a) => addN2([], a, 1),
    inversesqrt: (a) => invSqrt2([], a),
    length: mag,
    log: (a) => log2([], a),
    log2: (a) => log_22([], a),
    max: (a, b) => max2([], a, b),
    min: (a, b) => min2([], a, b),
    mix: (a, b, t) => mix2([], a, b, t),
    mixn: (a, b, t) => mixN2([], a, b, t),
    mod: (a, b) => fmod2([], a, b),
    modn: (a, b) => fmodN2([], a, b),
    mul: (a, b) => mul2([], a, b),
    mulnv: (a, b) => mulN2([], b, a),
    mulvn: (a, b) => mulN2([], a, b),
    normalize: (a) => normalize([], a),
    pow: (a, b) => pow2([], a, b),
    radians: (a) => radians2([], a),
    reflect: (a, b) => reflect([], a, b),
    refract: (a, b, c) => refract([], a, b, c),
    sign: (a) => sign2([], a),
    sin: (a) => sin2([], a),
    smoothstep: (a, b, t) => smoothStep2([], a, b, t),
    sqrt: (a) => sqrt2([], a),
    step: (a, b) => step2([], a, b),
    sub: (a, b) => sub2([], a, b),
    sub1: (a) => neg([], a),
    subnv: (a, b) => sub2(null, [a, a], b),
    subvn: (a, b) => subN2([], a, b),
    tan: (a) => tan2([], a)
};
